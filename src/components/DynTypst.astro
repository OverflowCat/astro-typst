---
import { renderToDynamicLayout, type TypstDocInput } from "../lib/typst.js";

export type Props = (
    | { code: string }
    | { src: string }
    | { input: TypstDocInput }
) &
    TypstOptions;

export type TypstOptions = {
    /**
     * Whether to add default style for anchors to function.
     *
     * If you have multiple svg elements in the same page,
     * you may want to set this to `false`, and import
     * the stylesheet manually.
     *
     * @default true
     */
    style?: boolean;
    /** @default "auto" */
    width?: number | string;
    /** @default "auto" */
    height?: number | string;
    /** @default 16 */
    remPx?: number;
    /** @default 2 */
    scale?: number;
};

const options = Astro.props;
let input: TypstDocInput =
    "src" in options
        ? { mainFilePath: options.src }
        : "code" in options
          ? options.code
          : options.input;

console.info({ input, options });
const vectorArtifact = await renderToDynamicLayout(input, options);
console.info({ vectorArtifact, length: vectorArtifact.length });
---

<script is:inline define:vars={{ vectorArtifact }}>
    window.vectorArtifact = vectorArtifact;
</script>
<script>
    import { createTypstRenderer } from "@myriaddreamin/typst.ts/dist/esm/renderer.mjs";
    const moduleInitOptions = {
        beforeBuild: [],
        getModule: () =>
            "/node_modules/@myriaddreamin/typst-ts-renderer/pkg/typst_ts_renderer_bg.wasm",
    };
    window["typstBindSemantics"] = function () {};
    window["typstBindSvgDom"] = function () {};
    window["captureStack"] = function () {
        return undefined;
    };

    // elem.style.top = `calc(var(--data-text-height) * ${rrt})`;
    // elem.style.left = `calc(var(--data-text-width) * ${rrl})`;
    const documentReady = () => {
        let plugin = createTypstRenderer();
        plugin.init(moduleInitOptions).then(async () => {
            const artifactData = new Uint8Array(window["vectorArtifact"].data);

            const appElem = document.getElementById("typst-app")!;

            let renderStart: DOMHighResTimeStamp;
            const domRender = async (ses) => {
                const dom = await plugin.renderDom({
                    renderSession: ses,
                    container: appElem,
                    pixelPerPt: 4.5,
                    domScale: 1.5,
                });
                console.log(
                    "render time!!!!!!!!!",
                    performance.now() - renderStart,
                );
                console.log(dom);

                dom.addChangement(["new", artifactData as unknown as string]);
                const viewportHandler = () => dom.addViewportChange();
                window.addEventListener("resize", viewportHandler);
                window.addEventListener("scroll", viewportHandler);
            };

            plugin.runWithSession(
                (ses) =>
                    new Promise(async (dispose) => {
                        renderStart = performance.now();
                        // await canvasRender(ses);
                        await domRender(ses);

                        void dispose;
                    }),
            );

            console.log("render done");
        });
    };
    document.addEventListener("DOMContentLoaded", documentReady);
</script>

<div id="typst-app-container">
    <div id="typst-app"></div>
</div>
<style>
    #typst-app-container {
        border: 1px solid #000;
        padding: 10px;
        display: flex;
        justify-content: center;
    }

    #typst-app {
        --typst-dom-scale: 1.5;
        margin: 5px;
    }

    .typst-dom-page {
        width: calc(var(--data-page-width, 100%) * var(--typst-dom-scale));
        height: calc(var(--data-page-height) * var(--typst-dom-scale));
        --data-text-width: calc(1px * var(--typst-dom-scale));
        --data-text-height: calc(1px * var(--typst-dom-scale));
        margin: auto;
    }

    .typst-back-canvas {
        position: absolute;
        z-index: -1;
        width: calc(var(--data-page-width, 100%) * var(--typst-dom-scale));
        height: calc(var(--data-page-height) * var(--typst-dom-scale));
        pointer-events: none;
    }

    .typst-svg-page {
        position: absolute;
        z-index: 0;
        width: calc(var(--data-page-width, 100%) * var(--typst-dom-scale));
        height: calc(var(--data-page-height) * var(--typst-dom-scale));
    }

    .typst-html-semantics {
        position: absolute;
        z-index: 2;
        width: calc(var(--data-page-width, 100%) * var(--typst-dom-scale));
        height: calc(var(--data-page-height) * var(--typst-dom-scale));
        color: transparent;
        font-family: monospace;
        white-space: pre;
    }

    .typst-html-semantics span {
        transform-origin: left top;
        position: absolute;
        display: inline-block;
        left: 0;
        top: 0;
    }

    .typst-content-hint {
        position: absolute;
        display: inline-block;
        width: 1px;
        height: 1px;
        overflow: hidden;
    }

    .typst-html-semantics a {
        position: absolute;
        display: inline-block;
    }

    /* set transparent itself */
    .typst-content-group {
        pointer-events: visible;
    }

    .typst-html-semantics span::-moz-selection {
        color: transparent;
        background: #7db9dea0;
    }

    .typst-html-semantics span::selection {
        color: transparent;
        background: #7db9dea0;
    }

    .typst-html-semantics *::-moz-selection {
        color: transparent;
        background: transparent;
    }

    .typst-html-semantics *::selection {
        color: transparent;
        background: transparent;
    }

    .typst-content-fallback {
        color: transparent;
        background: transparent;
    }

    .pseudo-link,
    .typst-text {
        pointer-events: none;
    }

    .typst-app {
        margin: 0;
    }

    .typst-page.canvas {
        margin: 0;
    }

    .typst-html-semantics {
        position: absolute;
        z-index: 2;
        color: transparent;
        font-family: monospace;
        white-space: pre;
    }

    .typst-html-semantics span {
        transform-origin: left top;
        position: absolute;
        display: inline-block;
        left: 0;
        top: 0;
    }

    .typst-content-hint {
        position: absolute;
        display: inline-block;
        width: 1px;
        height: 1px;
        overflow: hidden;
    }

    .typst-html-semantics a {
        position: absolute;
        display: inline-block;
    }

    /* set transparent itself */
    .typst-content-group {
        pointer-events: visible;
    }

    .typst-html-semantics span::-moz-selection {
        color: transparent;
        background: #7db9dea0;
    }

    .typst-html-semantics span::selection {
        color: transparent;
        background: #7db9dea0;
    }

    .typst-html-semantics *::-moz-selection {
        color: transparent;
        background: transparent;
    }

    .typst-html-semantics *::selection {
        color: transparent;
        background: transparent;
    }

    .typst-content-fallback {
        color: transparent;
        background: transparent;
    }

    .pseudo-link,
    .typst-text {
        pointer-events: none;
    }

    .typst-text {
        pointer-events: bounding-box;
    }

    .tsel span,
    .tsel {
        position: fixed;
        text-align: justify;
        white-space: pre;
        width: 100%;
        height: 100%;
        text-align-last: justify;
        color: transparent;
    }
    .tsel span::-moz-selection,
    .tsel::-moz-selection {
        color: transparent;
        background: #7db9dea0;
    }
    .tsel span::selection,
    .tsel::selection {
        color: transparent;
        background: #7db9dea0;
    }

    .pseudo-link {
        fill: transparent;
        cursor: pointer;
        pointer-events: all;
    }
    .outline_glyph path,
    path.outline_glyph {
        transition: 0.2s fill stroke;
    }

    .outline_glyph path,
    path.outline_glyph {
        fill: var(--glyph_fill);
        stroke: var(--glyph_stroke);
    }

    .hover .typst-text {
        --glyph_fill: #66bab7;
        --glyph_stroke: #66bab7;
    }

    .typst-jump-ripple,
    .typst-debug-react-ripple {
        width: 0;
        height: 0;
        background-color: transparent;
        position: absolute;
        border-radius: 50%;
    }
    .typst-jump-ripple {
        border: 1px solid #66bab7;
    }
    .typst-debug-react-ripple {
        border: 1px solid #cb1b45;
    }
    @keyframes typst-jump-ripple-effect {
        to {
            width: 10vw;
            height: 10vw;
            opacity: 0.01;
            margin: -5vw;
        }
    }
    @keyframes typst-debug-react-ripple-effect {
        to {
            width: 3vw;
            height: 3vw;
            opacity: 0.01;
            margin: -1.5vw;
        }
    }
</style>
