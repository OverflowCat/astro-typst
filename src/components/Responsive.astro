---
import { renderToVectorFormat, type TypstDocInput } from "../lib/typst.js";

export type Props = (
    | { code: string }
    | { src: string }
    | { input: TypstDocInput }
) &
    TypstOptions;

export type TypstOptions = {
    /**
     * Whether to add default style for anchors to function.
     *
     * If you have multiple svg elements in the same page,
     * you may want to set this to `false`, and import
     * the stylesheet manually.
     *
     * @default true
     */
    style?: boolean;
    /** @default "auto" */
    width?: number | string;
    /** @default "auto" */
    height?: number | string;
    /** @default 16 */
    remPx?: number;
    /** @default 2 */
    scale?: number;
};

const options = Astro.props;
let input: TypstDocInput =
    "src" in options
        ? { mainFilePath: options.src }
        : "code" in options
          ? options.code
          : options.input;

const vectorArtifact = await renderToVectorFormat(input, options);
console.info({ vectorArtifact, length: vectorArtifact.length });
---

<script is:inline define:vars={{ vectorArtifact }}>
    window.vectorArtifact = vectorArtifact;
</script>
<script>
    // @ts-ignore
    import { withGlobalRenderer } from "@myriaddreamin/typst.ts/dist/esm/contrib/global-renderer.mjs";
    // @ts-ignore
    import * as typst from "@myriaddreamin/typst.ts";
    const moduleInitOptions = {
        beforeBuild: [],
        getModule: () =>
            "/node_modules/@myriaddreamin/typst-ts-renderer/pkg/typst_ts_renderer_bg.wasm",
    };
    const doRender = (renderer) => {
        const divElem = document.getElementById("typ-container");
        if (!divElem || !window["vectorArtifact"]) {
            return;
        }
        const artifactContent = new Uint8Array(window["vectorArtifact"].data);
        console.log(artifactContent, artifactContent.length);
        renderer
            .renderDom({
                artifactContent,
                format: "vector",
                backgroundColor: "#ffffff",
                container: divElem,
                pixelPerPt: 8,
                domScale: 2,
            })
            .then((dom) => {
                console.log("rendered", dom);
                dom.addChangement([
                    "new",
                    artifactContent as unknown as string,
                ]);
            });
    };
    const reRender = () => {
        withGlobalRenderer(
            typst.createTypstRenderer,
            moduleInitOptions,
            doRender,
        );
    };
    const throttle = (func, limit) => {
        let inThrottle;
        return function () {
            const args = arguments;
            const context = this;
            if (!inThrottle) {
                func.apply(context, args);
                inThrottle = true;
                setTimeout(() => (inThrottle = false), limit);
            }
        };
    };
    document.addEventListener("DOMContentLoaded", () => {
        const container = document.getElementById("typ-container")!;
        console.log(container);
        reRender();
        // const throttledReRender = throttle(reRender, 100);
        // const resizeObserver = new ResizeObserver(throttledReRender);
        // resizeObserver.observe(container);
    });
</script>

<div id="typ-container"></div>
<style>
    #typ {
        resize: both;
        max-width: 700px;
        min-width: 300px;
        border: 1px solid #000;
        overflow: hidden; /* something other than visible */
    }
</style>
