---
import { renderToSVGString, renderToHTML } from "../lib/typst.js";
import { unified } from "unified";
import rehypeParse from "rehype-parse";
import rehypeFormat from "rehype-format";
import rehypeStringify from "rehype-stringify";
import rehypeSlots from "rehype-slots";

import type { TypstDocInput } from "../lib/prelude.js";

export type Props = (
    | { code: string }
    | { src: string }
    | { input: TypstDocInput }
) &
    TypstOptions;

export type TypstOptions = {
    /**
     * Whether to add default style for anchors to function.
     *
     * If you have multiple svg elements in the same page,
     * you may want to set this to `false`, and import
     * the stylesheet manually.
     *
     * @default true
     */
    style?: boolean;
    /**
     * The width of the SVG element.
     * If not set, the width will be calculated based on the content.
     * You may want to set this to `"100%"` to fit the container.`
     *  @default undefined */
    width?: string | number;
    /**
     * The height of the SVG element.
     * If not set, the height will be calculated based on the content.
     * You may want to set this to `"auto"` to fit the container.
     *  @default undefined */
    height?: string | number;
    /** @default {} */
    props?: Record<string, string>;
    /** @default 16 */
    remPx?: number;
    /** @default 2 */
    scale?: number;
    /** @default "svg" */
    target?: "svg" | "html";
};

const options = Astro.props;
let input: TypstDocInput =
    "src" in options
        ? { mainFilePath: options.src }
        : "code" in options
          ? options.code
          : options.input;

let renderResult: string;

if (options.target === "html") {
    const html = (await renderToHTML(input, options)).html;

    const slotContents: Record<string, import('unist').Node> = {};

    for (const slotName of Object.keys(Astro.slots)) {
        const htmlString = await Astro.slots.render(slotName);

        // Parse HTML string to HAST tree
        const hastTree = unified()
            .use(rehypeParse, { fragment: true })
            .parse(htmlString);

        slotContents[slotName] = hastTree;
    }

    renderResult = await unified()
        .use(rehypeParse, { fragment: true })
        .use(rehypeSlots, { values: slotContents }) // <-- attach the rehype-slots plugin
        .use(rehypeFormat)
        .use(rehypeStringify)
        .process(html)
        .then(String);
} else {
    renderResult = (await renderToSVGString(input, options)).svg;
}
---

<div set:html={renderResult} />
